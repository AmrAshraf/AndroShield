using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data.SqlClient;

namespace AndroShield
{
    public class vulnerabilityTable
    {
       private float severity;
       private string Category, Type;
        private int vulnID;
        public vulnerabilityTable() {  }
        public vulnerabilityTable( int id, float severity, string Category, string type)
        {
            this.vulnID = id;
            this.severity = severity;
            this.Category = Category;
            this.Type = type;
        }
        static public vulnerabilityTable addOrFindVulnerability (float severity, string category, string type)
        {
            databaseLayer.myConnection.Open();
            SqlCommand checkExistenceOfVulnerability = new SqlCommand("select * from vulnerability where severity=@y and category=@x and type=@z", databaseLayer.myConnection);
            SqlParameter Paramater = new SqlParameter("@y", severity);
            SqlParameter secondParamater = new SqlParameter("@x", category);
            SqlParameter thirdParamater = new SqlParameter("@z", type);
            checkExistenceOfVulnerability.Parameters.Add(Paramater);
            checkExistenceOfVulnerability.Parameters.Add(secondParamater);
            checkExistenceOfVulnerability.Parameters.Add(thirdParamater);
            checkExistenceOfVulnerability.ExecuteNonQuery();
            SqlDataReader reader = checkExistenceOfVulnerability.ExecuteReader();
            Int32 id;
            if (reader.Read())
            {
                id = (Int32)reader[0];
                vulnerabilityTable vul = new vulnerabilityTable(id, severity, category, type);
                databaseLayer.myConnection.Close();
                reader.Dispose();
                return vul;

            }

            try
            {
                reader.Dispose();
                SqlCommand myCommand = new SqlCommand("insert into vulnerability (category,type,severity) OUTPUT INSERTED.ID values (@b,@c,@d)", databaseLayer.myConnection);
                SqlParameter forthParamater = new SqlParameter("@b", category);
                SqlParameter fifthParamater = new SqlParameter("@c", type);
                SqlParameter sixthParamater = new SqlParameter("@d", severity);
                myCommand.Parameters.Add(forthParamater);
                myCommand.Parameters.Add(fifthParamater);
                myCommand.Parameters.Add(sixthParamater);
                id = (Int32) myCommand.ExecuteScalar();
                vulnerabilityTable vul = new vulnerabilityTable(id, severity, category, type);
                databaseLayer.myConnection.Close();
                return vul;
            }
            catch (System.Data.SqlClient.SqlException)
            {
                databaseLayer.myConnection.Close();
                return null;
            }
        }
        public bool deleteRecord(int ID)
        {
            try
            {
                databaseLayer.myConnection.Open();
                SqlCommand myCommand = new SqlCommand("Delete from vulnerability where vulnerabilityID=@y", databaseLayer.myConnection);
                SqlParameter secondParamater = new SqlParameter("@y", ID);
                myCommand.Parameters.Add(secondParamater);
                myCommand.ExecuteNonQuery();
                databaseLayer.myConnection.Close();
                return true;
            }
            catch
            {
                databaseLayer.myConnection.Close();
                return false;
            }
        }
    }
}